/**
 * generated by Xtext 2.14.0
 */
package org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.Lock;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.MondoPropertyBasedLockingPackage;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.PropertyBasedLockingModel;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.Role;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Based Locking Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.impl.PropertyBasedLockingModelImpl#getRoles <em>Roles</em>}</li>
 *   <li>{@link org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.impl.PropertyBasedLockingModelImpl#getLocks <em>Locks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyBasedLockingModelImpl extends MinimalEObjectImpl.Container implements PropertyBasedLockingModel
{
  /**
   * The cached value of the '{@link #getRoles() <em>Roles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoles()
   * @generated
   * @ordered
   */
  protected EList<Role> roles;

  /**
   * The cached value of the '{@link #getLocks() <em>Locks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocks()
   * @generated
   * @ordered
   */
  protected EList<Lock> locks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyBasedLockingModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MondoPropertyBasedLockingPackage.Literals.PROPERTY_BASED_LOCKING_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Role> getRoles()
  {
    if (roles == null)
    {
      roles = new EObjectContainmentEList<Role>(Role.class, this, MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__ROLES);
    }
    return roles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Lock> getLocks()
  {
    if (locks == null)
    {
      locks = new EObjectContainmentEList<Lock>(Lock.class, this, MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__LOCKS);
    }
    return locks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__ROLES:
        return ((InternalEList<?>)getRoles()).basicRemove(otherEnd, msgs);
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__LOCKS:
        return ((InternalEList<?>)getLocks()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__ROLES:
        return getRoles();
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__LOCKS:
        return getLocks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__ROLES:
        getRoles().clear();
        getRoles().addAll((Collection<? extends Role>)newValue);
        return;
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__LOCKS:
        getLocks().clear();
        getLocks().addAll((Collection<? extends Lock>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__ROLES:
        getRoles().clear();
        return;
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__LOCKS:
        getLocks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__ROLES:
        return roles != null && !roles.isEmpty();
      case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL__LOCKS:
        return locks != null && !locks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PropertyBasedLockingModelImpl
