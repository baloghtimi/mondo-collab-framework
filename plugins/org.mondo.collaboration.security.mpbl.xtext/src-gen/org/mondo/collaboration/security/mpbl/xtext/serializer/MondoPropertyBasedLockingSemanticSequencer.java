/*
 * generated by Xtext 2.14.0
 */
package org.mondo.collaboration.security.mpbl.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.Binding;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.Group;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.Lock;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.MondoPropertyBasedLockingPackage;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.ObjectBind;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.PropertyBasedLockingModel;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.RoleBind;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.User;
import org.mondo.collaboration.security.mpbl.xtext.mondoPropertyBasedLocking.ValueBind;
import org.mondo.collaboration.security.mpbl.xtext.services.MondoPropertyBasedLockingGrammarAccess;

@SuppressWarnings("all")
public class MondoPropertyBasedLockingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MondoPropertyBasedLockingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MondoPropertyBasedLockingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MondoPropertyBasedLockingPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.LOCK:
				sequence_Lock(context, (Lock) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.OBJECT_BIND:
				sequence_ObjectBind(context, (ObjectBind) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.PROPERTY_BASED_LOCKING_MODEL:
				sequence_PropertyBasedLockingModel(context, (PropertyBasedLockingModel) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.ROLE_BIND:
				sequence_RoleBind(context, (RoleBind) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			case MondoPropertyBasedLockingPackage.VALUE_BIND:
				sequence_ValueBind(context, (ValueBind) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (param=[Variable|ID] value=Bind)
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MondoPropertyBasedLockingPackage.Literals.BINDING__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MondoPropertyBasedLockingPackage.Literals.BINDING__PARAM));
			if (transientValues.isValueTransient(semanticObject, MondoPropertyBasedLockingPackage.Literals.BINDING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MondoPropertyBasedLockingPackage.Literals.BINDING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getParamVariableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MondoPropertyBasedLockingPackage.Literals.BINDING__PARAM, false));
		feeder.accept(grammarAccess.getBindingAccess().getValueBindParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Role returns Group
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (name=ID users+=[User|ID] users+=[User|ID]*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lock returns Lock
	 *
	 * Constraint:
	 *     (owner=[Role|ID] pattern=[Pattern|STRING] bindings+=Binding*)
	 */
	protected void sequence_Lock(ISerializationContext context, Lock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bind returns ObjectBind
	 *     ObjectBind returns ObjectBind
	 *
	 * Constraint:
	 *     object=[EObject|ID]
	 */
	protected void sequence_ObjectBind(ISerializationContext context, ObjectBind semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MondoPropertyBasedLockingPackage.Literals.OBJECT_BIND__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MondoPropertyBasedLockingPackage.Literals.OBJECT_BIND__OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectBindAccess().getObjectEObjectIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MondoPropertyBasedLockingPackage.Literals.OBJECT_BIND__OBJECT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyBasedLockingModel returns PropertyBasedLockingModel
	 *
	 * Constraint:
	 *     (roles+=Role* locks+=Lock*)
	 */
	protected void sequence_PropertyBasedLockingModel(ISerializationContext context, PropertyBasedLockingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bind returns RoleBind
	 *     RoleBind returns RoleBind
	 *
	 * Constraint:
	 *     role=[Role|ID]
	 */
	protected void sequence_RoleBind(ISerializationContext context, RoleBind semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MondoPropertyBasedLockingPackage.Literals.ROLE_BIND__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MondoPropertyBasedLockingPackage.Literals.ROLE_BIND__ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleBindAccess().getRoleRoleIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MondoPropertyBasedLockingPackage.Literals.ROLE_BIND__ROLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Role returns User
	 *     User returns User
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MondoPropertyBasedLockingPackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MondoPropertyBasedLockingPackage.Literals.ROLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bind returns ValueBind
	 *     ValueBind returns ValueBind
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ValueBind(ISerializationContext context, ValueBind semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MondoPropertyBasedLockingPackage.Literals.VALUE_BIND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MondoPropertyBasedLockingPackage.Literals.VALUE_BIND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueBindAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
